// Code generated by go-mockgen 1.2.0; DO NOT EDIT.

package flamego

import (
	"net/http"
	"reflect"
	"sync"

	inject "github.com/flamego/flamego/inject"
)

// MockContext is a mock implementation of the Context interface (from the
// package github.com/flamego/flamego) used for unit testing.
type MockContext struct {
	// ApplyFunc is an instance of a mock function object controlling the
	// behavior of the method Apply.
	ApplyFunc *ContextApplyFunc
	// CookieFunc is an instance of a mock function object controlling the
	// behavior of the method Cookie.
	CookieFunc *ContextCookieFunc
	// InvokeFunc is an instance of a mock function object controlling the
	// behavior of the method Invoke.
	InvokeFunc *ContextInvokeFunc
	// MapFunc is an instance of a mock function object controlling the
	// behavior of the method Map.
	MapFunc *ContextMapFunc
	// MapToFunc is an instance of a mock function object controlling the
	// behavior of the method MapTo.
	MapToFunc *ContextMapToFunc
	// NextFunc is an instance of a mock function object controlling the
	// behavior of the method Next.
	NextFunc *ContextNextFunc
	// ParamFunc is an instance of a mock function object controlling the
	// behavior of the method Param.
	ParamFunc *ContextParamFunc
	// ParamIntFunc is an instance of a mock function object controlling the
	// behavior of the method ParamInt.
	ParamIntFunc *ContextParamIntFunc
	// ParamInt64Func is an instance of a mock function object controlling
	// the behavior of the method ParamInt64.
	ParamInt64Func *ContextParamInt64Func
	// ParamsFunc is an instance of a mock function object controlling the
	// behavior of the method Params.
	ParamsFunc *ContextParamsFunc
	// QueryFunc is an instance of a mock function object controlling the
	// behavior of the method Query.
	QueryFunc *ContextQueryFunc
	// QueryBoolFunc is an instance of a mock function object controlling
	// the behavior of the method QueryBool.
	QueryBoolFunc *ContextQueryBoolFunc
	// QueryFloat64Func is an instance of a mock function object controlling
	// the behavior of the method QueryFloat64.
	QueryFloat64Func *ContextQueryFloat64Func
	// QueryIntFunc is an instance of a mock function object controlling the
	// behavior of the method QueryInt.
	QueryIntFunc *ContextQueryIntFunc
	// QueryInt64Func is an instance of a mock function object controlling
	// the behavior of the method QueryInt64.
	QueryInt64Func *ContextQueryInt64Func
	// QueryStringsFunc is an instance of a mock function object controlling
	// the behavior of the method QueryStrings.
	QueryStringsFunc *ContextQueryStringsFunc
	// QueryTrimFunc is an instance of a mock function object controlling
	// the behavior of the method QueryTrim.
	QueryTrimFunc *ContextQueryTrimFunc
	// QueryUnescapeFunc is an instance of a mock function object
	// controlling the behavior of the method QueryUnescape.
	QueryUnescapeFunc *ContextQueryUnescapeFunc
	// RedirectFunc is an instance of a mock function object controlling the
	// behavior of the method Redirect.
	RedirectFunc *ContextRedirectFunc
	// RemoteAddrFunc is an instance of a mock function object controlling
	// the behavior of the method RemoteAddr.
	RemoteAddrFunc *ContextRemoteAddrFunc
	// RequestFunc is an instance of a mock function object controlling the
	// behavior of the method Request.
	RequestFunc *ContextRequestFunc
	// ResponseWriterFunc is an instance of a mock function object
	// controlling the behavior of the method ResponseWriter.
	ResponseWriterFunc *ContextResponseWriterFunc
	// SetFunc is an instance of a mock function object controlling the
	// behavior of the method Set.
	SetFunc *ContextSetFunc
	// SetCookieFunc is an instance of a mock function object controlling
	// the behavior of the method SetCookie.
	SetCookieFunc *ContextSetCookieFunc
	// SetParentFunc is an instance of a mock function object controlling
	// the behavior of the method SetParent.
	SetParentFunc *ContextSetParentFunc
	// URLPathFunc is an instance of a mock function object controlling the
	// behavior of the method URLPath.
	URLPathFunc *ContextURLPathFunc
	// ValueFunc is an instance of a mock function object controlling the
	// behavior of the method Value.
	ValueFunc *ContextValueFunc
}

// NewMockContext creates a new mock of the Context interface. All methods
// return zero values for all results, unless overwritten.
func NewMockContext() *MockContext {
	return &MockContext{
		ApplyFunc: &ContextApplyFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		CookieFunc: &ContextCookieFunc{
			defaultHook: func(string) (r0 string) {
				return
			},
		},
		InvokeFunc: &ContextInvokeFunc{
			defaultHook: func(interface{}) (r0 []reflect.Value, r1 error) {
				return
			},
		},
		MapFunc: &ContextMapFunc{
			defaultHook: func(...interface{}) (r0 inject.TypeMapper) {
				return
			},
		},
		MapToFunc: &ContextMapToFunc{
			defaultHook: func(interface{}, interface{}) (r0 inject.TypeMapper) {
				return
			},
		},
		NextFunc: &ContextNextFunc{
			defaultHook: func() {
				return
			},
		},
		ParamFunc: &ContextParamFunc{
			defaultHook: func(string) (r0 string) {
				return
			},
		},
		ParamIntFunc: &ContextParamIntFunc{
			defaultHook: func(string) (r0 int) {
				return
			},
		},
		ParamInt64Func: &ContextParamInt64Func{
			defaultHook: func(string) (r0 int64) {
				return
			},
		},
		ParamsFunc: &ContextParamsFunc{
			defaultHook: func() (r0 Params) {
				return
			},
		},
		QueryFunc: &ContextQueryFunc{
			defaultHook: func(string, ...string) (r0 string) {
				return
			},
		},
		QueryBoolFunc: &ContextQueryBoolFunc{
			defaultHook: func(string, ...bool) (r0 bool) {
				return
			},
		},
		QueryFloat64Func: &ContextQueryFloat64Func{
			defaultHook: func(string, ...float64) (r0 float64) {
				return
			},
		},
		QueryIntFunc: &ContextQueryIntFunc{
			defaultHook: func(string, ...int) (r0 int) {
				return
			},
		},
		QueryInt64Func: &ContextQueryInt64Func{
			defaultHook: func(string, ...int64) (r0 int64) {
				return
			},
		},
		QueryStringsFunc: &ContextQueryStringsFunc{
			defaultHook: func(string, ...[]string) (r0 []string) {
				return
			},
		},
		QueryTrimFunc: &ContextQueryTrimFunc{
			defaultHook: func(string, ...string) (r0 string) {
				return
			},
		},
		QueryUnescapeFunc: &ContextQueryUnescapeFunc{
			defaultHook: func(string, ...string) (r0 string) {
				return
			},
		},
		RedirectFunc: &ContextRedirectFunc{
			defaultHook: func(string, ...int) {
				return
			},
		},
		RemoteAddrFunc: &ContextRemoteAddrFunc{
			defaultHook: func() (r0 string) {
				return
			},
		},
		RequestFunc: &ContextRequestFunc{
			defaultHook: func() (r0 *Request) {
				return
			},
		},
		ResponseWriterFunc: &ContextResponseWriterFunc{
			defaultHook: func() (r0 ResponseWriter) {
				return
			},
		},
		SetFunc: &ContextSetFunc{
			defaultHook: func(reflect.Type, reflect.Value) (r0 inject.TypeMapper) {
				return
			},
		},
		SetCookieFunc: &ContextSetCookieFunc{
			defaultHook: func(http.Cookie) {
				return
			},
		},
		SetParentFunc: &ContextSetParentFunc{
			defaultHook: func(inject.Injector) {
				return
			},
		},
		URLPathFunc: &ContextURLPathFunc{
			defaultHook: func(string, ...string) (r0 string) {
				return
			},
		},
		ValueFunc: &ContextValueFunc{
			defaultHook: func(reflect.Type) (r0 reflect.Value) {
				return
			},
		},
	}
}

// NewStrictMockContext creates a new mock of the Context interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockContext() *MockContext {
	return &MockContext{
		ApplyFunc: &ContextApplyFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockContext.Apply")
			},
		},
		CookieFunc: &ContextCookieFunc{
			defaultHook: func(string) string {
				panic("unexpected invocation of MockContext.Cookie")
			},
		},
		InvokeFunc: &ContextInvokeFunc{
			defaultHook: func(interface{}) ([]reflect.Value, error) {
				panic("unexpected invocation of MockContext.Invoke")
			},
		},
		MapFunc: &ContextMapFunc{
			defaultHook: func(...interface{}) inject.TypeMapper {
				panic("unexpected invocation of MockContext.Map")
			},
		},
		MapToFunc: &ContextMapToFunc{
			defaultHook: func(interface{}, interface{}) inject.TypeMapper {
				panic("unexpected invocation of MockContext.MapTo")
			},
		},
		NextFunc: &ContextNextFunc{
			defaultHook: func() {
				panic("unexpected invocation of MockContext.Next")
			},
		},
		ParamFunc: &ContextParamFunc{
			defaultHook: func(string) string {
				panic("unexpected invocation of MockContext.Param")
			},
		},
		ParamIntFunc: &ContextParamIntFunc{
			defaultHook: func(string) int {
				panic("unexpected invocation of MockContext.ParamInt")
			},
		},
		ParamInt64Func: &ContextParamInt64Func{
			defaultHook: func(string) int64 {
				panic("unexpected invocation of MockContext.ParamInt64")
			},
		},
		ParamsFunc: &ContextParamsFunc{
			defaultHook: func() Params {
				panic("unexpected invocation of MockContext.Params")
			},
		},
		QueryFunc: &ContextQueryFunc{
			defaultHook: func(string, ...string) string {
				panic("unexpected invocation of MockContext.Query")
			},
		},
		QueryBoolFunc: &ContextQueryBoolFunc{
			defaultHook: func(string, ...bool) bool {
				panic("unexpected invocation of MockContext.QueryBool")
			},
		},
		QueryFloat64Func: &ContextQueryFloat64Func{
			defaultHook: func(string, ...float64) float64 {
				panic("unexpected invocation of MockContext.QueryFloat64")
			},
		},
		QueryIntFunc: &ContextQueryIntFunc{
			defaultHook: func(string, ...int) int {
				panic("unexpected invocation of MockContext.QueryInt")
			},
		},
		QueryInt64Func: &ContextQueryInt64Func{
			defaultHook: func(string, ...int64) int64 {
				panic("unexpected invocation of MockContext.QueryInt64")
			},
		},
		QueryStringsFunc: &ContextQueryStringsFunc{
			defaultHook: func(string, ...[]string) []string {
				panic("unexpected invocation of MockContext.QueryStrings")
			},
		},
		QueryTrimFunc: &ContextQueryTrimFunc{
			defaultHook: func(string, ...string) string {
				panic("unexpected invocation of MockContext.QueryTrim")
			},
		},
		QueryUnescapeFunc: &ContextQueryUnescapeFunc{
			defaultHook: func(string, ...string) string {
				panic("unexpected invocation of MockContext.QueryUnescape")
			},
		},
		RedirectFunc: &ContextRedirectFunc{
			defaultHook: func(string, ...int) {
				panic("unexpected invocation of MockContext.Redirect")
			},
		},
		RemoteAddrFunc: &ContextRemoteAddrFunc{
			defaultHook: func() string {
				panic("unexpected invocation of MockContext.RemoteAddr")
			},
		},
		RequestFunc: &ContextRequestFunc{
			defaultHook: func() *Request {
				panic("unexpected invocation of MockContext.Request")
			},
		},
		ResponseWriterFunc: &ContextResponseWriterFunc{
			defaultHook: func() ResponseWriter {
				panic("unexpected invocation of MockContext.ResponseWriter")
			},
		},
		SetFunc: &ContextSetFunc{
			defaultHook: func(reflect.Type, reflect.Value) inject.TypeMapper {
				panic("unexpected invocation of MockContext.Set")
			},
		},
		SetCookieFunc: &ContextSetCookieFunc{
			defaultHook: func(http.Cookie) {
				panic("unexpected invocation of MockContext.SetCookie")
			},
		},
		SetParentFunc: &ContextSetParentFunc{
			defaultHook: func(inject.Injector) {
				panic("unexpected invocation of MockContext.SetParent")
			},
		},
		URLPathFunc: &ContextURLPathFunc{
			defaultHook: func(string, ...string) string {
				panic("unexpected invocation of MockContext.URLPath")
			},
		},
		ValueFunc: &ContextValueFunc{
			defaultHook: func(reflect.Type) reflect.Value {
				panic("unexpected invocation of MockContext.Value")
			},
		},
	}
}

// NewMockContextFrom creates a new mock of the MockContext interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockContextFrom(i Context) *MockContext {
	return &MockContext{
		ApplyFunc: &ContextApplyFunc{
			defaultHook: i.Apply,
		},
		CookieFunc: &ContextCookieFunc{
			defaultHook: i.Cookie,
		},
		InvokeFunc: &ContextInvokeFunc{
			defaultHook: i.Invoke,
		},
		MapFunc: &ContextMapFunc{
			defaultHook: i.Map,
		},
		MapToFunc: &ContextMapToFunc{
			defaultHook: i.MapTo,
		},
		NextFunc: &ContextNextFunc{
			defaultHook: i.Next,
		},
		ParamFunc: &ContextParamFunc{
			defaultHook: i.Param,
		},
		ParamIntFunc: &ContextParamIntFunc{
			defaultHook: i.ParamInt,
		},
		ParamInt64Func: &ContextParamInt64Func{
			defaultHook: i.ParamInt64,
		},
		ParamsFunc: &ContextParamsFunc{
			defaultHook: i.Params,
		},
		QueryFunc: &ContextQueryFunc{
			defaultHook: i.Query,
		},
		QueryBoolFunc: &ContextQueryBoolFunc{
			defaultHook: i.QueryBool,
		},
		QueryFloat64Func: &ContextQueryFloat64Func{
			defaultHook: i.QueryFloat64,
		},
		QueryIntFunc: &ContextQueryIntFunc{
			defaultHook: i.QueryInt,
		},
		QueryInt64Func: &ContextQueryInt64Func{
			defaultHook: i.QueryInt64,
		},
		QueryStringsFunc: &ContextQueryStringsFunc{
			defaultHook: i.QueryStrings,
		},
		QueryTrimFunc: &ContextQueryTrimFunc{
			defaultHook: i.QueryTrim,
		},
		QueryUnescapeFunc: &ContextQueryUnescapeFunc{
			defaultHook: i.QueryUnescape,
		},
		RedirectFunc: &ContextRedirectFunc{
			defaultHook: i.Redirect,
		},
		RemoteAddrFunc: &ContextRemoteAddrFunc{
			defaultHook: i.RemoteAddr,
		},
		RequestFunc: &ContextRequestFunc{
			defaultHook: i.Request,
		},
		ResponseWriterFunc: &ContextResponseWriterFunc{
			defaultHook: i.ResponseWriter,
		},
		SetFunc: &ContextSetFunc{
			defaultHook: i.Set,
		},
		SetCookieFunc: &ContextSetCookieFunc{
			defaultHook: i.SetCookie,
		},
		SetParentFunc: &ContextSetParentFunc{
			defaultHook: i.SetParent,
		},
		URLPathFunc: &ContextURLPathFunc{
			defaultHook: i.URLPath,
		},
		ValueFunc: &ContextValueFunc{
			defaultHook: i.Value,
		},
	}
}

// ContextApplyFunc describes the behavior when the Apply method of the
// parent MockContext instance is invoked.
type ContextApplyFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []ContextApplyFuncCall
	mutex       sync.Mutex
}

// Apply delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) Apply(v0 interface{}) error {
	r0 := m.ApplyFunc.nextHook()(v0)
	m.ApplyFunc.appendCall(ContextApplyFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Apply method of the
// parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextApplyFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Apply method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextApplyFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextApplyFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextApplyFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *ContextApplyFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextApplyFunc) appendCall(r0 ContextApplyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextApplyFuncCall objects describing the
// invocations of this function.
func (f *ContextApplyFunc) History() []ContextApplyFuncCall {
	f.mutex.Lock()
	history := make([]ContextApplyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextApplyFuncCall is an object that describes an invocation of method
// Apply on an instance of MockContext.
type ContextApplyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextApplyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextApplyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextCookieFunc describes the behavior when the Cookie method of the
// parent MockContext instance is invoked.
type ContextCookieFunc struct {
	defaultHook func(string) string
	hooks       []func(string) string
	history     []ContextCookieFuncCall
	mutex       sync.Mutex
}

// Cookie delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) Cookie(v0 string) string {
	r0 := m.CookieFunc.nextHook()(v0)
	m.CookieFunc.appendCall(ContextCookieFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Cookie method of the
// parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextCookieFunc) SetDefaultHook(hook func(string) string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Cookie method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextCookieFunc) PushHook(hook func(string) string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextCookieFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func(string) string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextCookieFunc) PushReturn(r0 string) {
	f.PushHook(func(string) string {
		return r0
	})
}

func (f *ContextCookieFunc) nextHook() func(string) string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextCookieFunc) appendCall(r0 ContextCookieFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextCookieFuncCall objects describing
// the invocations of this function.
func (f *ContextCookieFunc) History() []ContextCookieFuncCall {
	f.mutex.Lock()
	history := make([]ContextCookieFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextCookieFuncCall is an object that describes an invocation of method
// Cookie on an instance of MockContext.
type ContextCookieFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextCookieFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextCookieFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextInvokeFunc describes the behavior when the Invoke method of the
// parent MockContext instance is invoked.
type ContextInvokeFunc struct {
	defaultHook func(interface{}) ([]reflect.Value, error)
	hooks       []func(interface{}) ([]reflect.Value, error)
	history     []ContextInvokeFuncCall
	mutex       sync.Mutex
}

// Invoke delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) Invoke(v0 interface{}) ([]reflect.Value, error) {
	r0, r1 := m.InvokeFunc.nextHook()(v0)
	m.InvokeFunc.appendCall(ContextInvokeFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Invoke method of the
// parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextInvokeFunc) SetDefaultHook(hook func(interface{}) ([]reflect.Value, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Invoke method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextInvokeFunc) PushHook(hook func(interface{}) ([]reflect.Value, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextInvokeFunc) SetDefaultReturn(r0 []reflect.Value, r1 error) {
	f.SetDefaultHook(func(interface{}) ([]reflect.Value, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextInvokeFunc) PushReturn(r0 []reflect.Value, r1 error) {
	f.PushHook(func(interface{}) ([]reflect.Value, error) {
		return r0, r1
	})
}

func (f *ContextInvokeFunc) nextHook() func(interface{}) ([]reflect.Value, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextInvokeFunc) appendCall(r0 ContextInvokeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextInvokeFuncCall objects describing
// the invocations of this function.
func (f *ContextInvokeFunc) History() []ContextInvokeFuncCall {
	f.mutex.Lock()
	history := make([]ContextInvokeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextInvokeFuncCall is an object that describes an invocation of method
// Invoke on an instance of MockContext.
type ContextInvokeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []reflect.Value
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextInvokeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextInvokeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ContextMapFunc describes the behavior when the Map method of the parent
// MockContext instance is invoked.
type ContextMapFunc struct {
	defaultHook func(...interface{}) inject.TypeMapper
	hooks       []func(...interface{}) inject.TypeMapper
	history     []ContextMapFuncCall
	mutex       sync.Mutex
}

// Map delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) Map(v0 ...interface{}) inject.TypeMapper {
	r0 := m.MapFunc.nextHook()(v0...)
	m.MapFunc.appendCall(ContextMapFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Map method of the
// parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextMapFunc) SetDefaultHook(hook func(...interface{}) inject.TypeMapper) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Map method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextMapFunc) PushHook(hook func(...interface{}) inject.TypeMapper) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextMapFunc) SetDefaultReturn(r0 inject.TypeMapper) {
	f.SetDefaultHook(func(...interface{}) inject.TypeMapper {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextMapFunc) PushReturn(r0 inject.TypeMapper) {
	f.PushHook(func(...interface{}) inject.TypeMapper {
		return r0
	})
}

func (f *ContextMapFunc) nextHook() func(...interface{}) inject.TypeMapper {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextMapFunc) appendCall(r0 ContextMapFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextMapFuncCall objects describing the
// invocations of this function.
func (f *ContextMapFunc) History() []ContextMapFuncCall {
	f.mutex.Lock()
	history := make([]ContextMapFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextMapFuncCall is an object that describes an invocation of method
// Map on an instance of MockContext.
type ContextMapFuncCall struct {
	// Arg0 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg0 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 inject.TypeMapper
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ContextMapFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg0 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextMapFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextMapToFunc describes the behavior when the MapTo method of the
// parent MockContext instance is invoked.
type ContextMapToFunc struct {
	defaultHook func(interface{}, interface{}) inject.TypeMapper
	hooks       []func(interface{}, interface{}) inject.TypeMapper
	history     []ContextMapToFuncCall
	mutex       sync.Mutex
}

// MapTo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) MapTo(v0 interface{}, v1 interface{}) inject.TypeMapper {
	r0 := m.MapToFunc.nextHook()(v0, v1)
	m.MapToFunc.appendCall(ContextMapToFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MapTo method of the
// parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextMapToFunc) SetDefaultHook(hook func(interface{}, interface{}) inject.TypeMapper) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MapTo method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextMapToFunc) PushHook(hook func(interface{}, interface{}) inject.TypeMapper) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextMapToFunc) SetDefaultReturn(r0 inject.TypeMapper) {
	f.SetDefaultHook(func(interface{}, interface{}) inject.TypeMapper {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextMapToFunc) PushReturn(r0 inject.TypeMapper) {
	f.PushHook(func(interface{}, interface{}) inject.TypeMapper {
		return r0
	})
}

func (f *ContextMapToFunc) nextHook() func(interface{}, interface{}) inject.TypeMapper {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextMapToFunc) appendCall(r0 ContextMapToFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextMapToFuncCall objects describing the
// invocations of this function.
func (f *ContextMapToFunc) History() []ContextMapToFuncCall {
	f.mutex.Lock()
	history := make([]ContextMapToFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextMapToFuncCall is an object that describes an invocation of method
// MapTo on an instance of MockContext.
type ContextMapToFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 inject.TypeMapper
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextMapToFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextMapToFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextNextFunc describes the behavior when the Next method of the parent
// MockContext instance is invoked.
type ContextNextFunc struct {
	defaultHook func()
	hooks       []func()
	history     []ContextNextFuncCall
	mutex       sync.Mutex
}

// Next delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) Next() {
	m.NextFunc.nextHook()()
	m.NextFunc.appendCall(ContextNextFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the Next method of the
// parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextNextFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Next method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextNextFunc) PushHook(hook func()) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextNextFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextNextFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *ContextNextFunc) nextHook() func() {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextNextFunc) appendCall(r0 ContextNextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextNextFuncCall objects describing the
// invocations of this function.
func (f *ContextNextFunc) History() []ContextNextFuncCall {
	f.mutex.Lock()
	history := make([]ContextNextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextNextFuncCall is an object that describes an invocation of method
// Next on an instance of MockContext.
type ContextNextFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextNextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextNextFuncCall) Results() []interface{} {
	return []interface{}{}
}

// ContextParamFunc describes the behavior when the Param method of the
// parent MockContext instance is invoked.
type ContextParamFunc struct {
	defaultHook func(string) string
	hooks       []func(string) string
	history     []ContextParamFuncCall
	mutex       sync.Mutex
}

// Param delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) Param(v0 string) string {
	r0 := m.ParamFunc.nextHook()(v0)
	m.ParamFunc.appendCall(ContextParamFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Param method of the
// parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextParamFunc) SetDefaultHook(hook func(string) string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Param method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextParamFunc) PushHook(hook func(string) string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextParamFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func(string) string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextParamFunc) PushReturn(r0 string) {
	f.PushHook(func(string) string {
		return r0
	})
}

func (f *ContextParamFunc) nextHook() func(string) string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextParamFunc) appendCall(r0 ContextParamFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextParamFuncCall objects describing the
// invocations of this function.
func (f *ContextParamFunc) History() []ContextParamFuncCall {
	f.mutex.Lock()
	history := make([]ContextParamFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextParamFuncCall is an object that describes an invocation of method
// Param on an instance of MockContext.
type ContextParamFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextParamFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextParamFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextParamIntFunc describes the behavior when the ParamInt method of
// the parent MockContext instance is invoked.
type ContextParamIntFunc struct {
	defaultHook func(string) int
	hooks       []func(string) int
	history     []ContextParamIntFuncCall
	mutex       sync.Mutex
}

// ParamInt delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) ParamInt(v0 string) int {
	r0 := m.ParamIntFunc.nextHook()(v0)
	m.ParamIntFunc.appendCall(ContextParamIntFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ParamInt method of
// the parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextParamIntFunc) SetDefaultHook(hook func(string) int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParamInt method of the parent MockContext instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextParamIntFunc) PushHook(hook func(string) int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextParamIntFunc) SetDefaultReturn(r0 int) {
	f.SetDefaultHook(func(string) int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextParamIntFunc) PushReturn(r0 int) {
	f.PushHook(func(string) int {
		return r0
	})
}

func (f *ContextParamIntFunc) nextHook() func(string) int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextParamIntFunc) appendCall(r0 ContextParamIntFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextParamIntFuncCall objects describing
// the invocations of this function.
func (f *ContextParamIntFunc) History() []ContextParamIntFuncCall {
	f.mutex.Lock()
	history := make([]ContextParamIntFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextParamIntFuncCall is an object that describes an invocation of
// method ParamInt on an instance of MockContext.
type ContextParamIntFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextParamIntFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextParamIntFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextParamInt64Func describes the behavior when the ParamInt64 method
// of the parent MockContext instance is invoked.
type ContextParamInt64Func struct {
	defaultHook func(string) int64
	hooks       []func(string) int64
	history     []ContextParamInt64FuncCall
	mutex       sync.Mutex
}

// ParamInt64 delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContext) ParamInt64(v0 string) int64 {
	r0 := m.ParamInt64Func.nextHook()(v0)
	m.ParamInt64Func.appendCall(ContextParamInt64FuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ParamInt64 method of
// the parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextParamInt64Func) SetDefaultHook(hook func(string) int64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ParamInt64 method of the parent MockContext instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextParamInt64Func) PushHook(hook func(string) int64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextParamInt64Func) SetDefaultReturn(r0 int64) {
	f.SetDefaultHook(func(string) int64 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextParamInt64Func) PushReturn(r0 int64) {
	f.PushHook(func(string) int64 {
		return r0
	})
}

func (f *ContextParamInt64Func) nextHook() func(string) int64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextParamInt64Func) appendCall(r0 ContextParamInt64FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextParamInt64FuncCall objects
// describing the invocations of this function.
func (f *ContextParamInt64Func) History() []ContextParamInt64FuncCall {
	f.mutex.Lock()
	history := make([]ContextParamInt64FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextParamInt64FuncCall is an object that describes an invocation of
// method ParamInt64 on an instance of MockContext.
type ContextParamInt64FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextParamInt64FuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextParamInt64FuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextParamsFunc describes the behavior when the Params method of the
// parent MockContext instance is invoked.
type ContextParamsFunc struct {
	defaultHook func() Params
	hooks       []func() Params
	history     []ContextParamsFuncCall
	mutex       sync.Mutex
}

// Params delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) Params() Params {
	r0 := m.ParamsFunc.nextHook()()
	m.ParamsFunc.appendCall(ContextParamsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Params method of the
// parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextParamsFunc) SetDefaultHook(hook func() Params) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Params method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextParamsFunc) PushHook(hook func() Params) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextParamsFunc) SetDefaultReturn(r0 Params) {
	f.SetDefaultHook(func() Params {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextParamsFunc) PushReturn(r0 Params) {
	f.PushHook(func() Params {
		return r0
	})
}

func (f *ContextParamsFunc) nextHook() func() Params {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextParamsFunc) appendCall(r0 ContextParamsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextParamsFuncCall objects describing
// the invocations of this function.
func (f *ContextParamsFunc) History() []ContextParamsFuncCall {
	f.mutex.Lock()
	history := make([]ContextParamsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextParamsFuncCall is an object that describes an invocation of method
// Params on an instance of MockContext.
type ContextParamsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 Params
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextParamsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextParamsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextQueryFunc describes the behavior when the Query method of the
// parent MockContext instance is invoked.
type ContextQueryFunc struct {
	defaultHook func(string, ...string) string
	hooks       []func(string, ...string) string
	history     []ContextQueryFuncCall
	mutex       sync.Mutex
}

// Query delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) Query(v0 string, v1 ...string) string {
	r0 := m.QueryFunc.nextHook()(v0, v1...)
	m.QueryFunc.appendCall(ContextQueryFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Query method of the
// parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextQueryFunc) SetDefaultHook(hook func(string, ...string) string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Query method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextQueryFunc) PushHook(hook func(string, ...string) string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextQueryFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func(string, ...string) string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextQueryFunc) PushReturn(r0 string) {
	f.PushHook(func(string, ...string) string {
		return r0
	})
}

func (f *ContextQueryFunc) nextHook() func(string, ...string) string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextQueryFunc) appendCall(r0 ContextQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextQueryFuncCall objects describing the
// invocations of this function.
func (f *ContextQueryFunc) History() []ContextQueryFuncCall {
	f.mutex.Lock()
	history := make([]ContextQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextQueryFuncCall is an object that describes an invocation of method
// Query on an instance of MockContext.
type ContextQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ContextQueryFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextQueryBoolFunc describes the behavior when the QueryBool method of
// the parent MockContext instance is invoked.
type ContextQueryBoolFunc struct {
	defaultHook func(string, ...bool) bool
	hooks       []func(string, ...bool) bool
	history     []ContextQueryBoolFuncCall
	mutex       sync.Mutex
}

// QueryBool delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) QueryBool(v0 string, v1 ...bool) bool {
	r0 := m.QueryBoolFunc.nextHook()(v0, v1...)
	m.QueryBoolFunc.appendCall(ContextQueryBoolFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryBool method of
// the parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextQueryBoolFunc) SetDefaultHook(hook func(string, ...bool) bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryBool method of the parent MockContext instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextQueryBoolFunc) PushHook(hook func(string, ...bool) bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextQueryBoolFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func(string, ...bool) bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextQueryBoolFunc) PushReturn(r0 bool) {
	f.PushHook(func(string, ...bool) bool {
		return r0
	})
}

func (f *ContextQueryBoolFunc) nextHook() func(string, ...bool) bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextQueryBoolFunc) appendCall(r0 ContextQueryBoolFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextQueryBoolFuncCall objects describing
// the invocations of this function.
func (f *ContextQueryBoolFunc) History() []ContextQueryBoolFuncCall {
	f.mutex.Lock()
	history := make([]ContextQueryBoolFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextQueryBoolFuncCall is an object that describes an invocation of
// method QueryBool on an instance of MockContext.
type ContextQueryBoolFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ContextQueryBoolFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextQueryBoolFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextQueryFloat64Func describes the behavior when the QueryFloat64
// method of the parent MockContext instance is invoked.
type ContextQueryFloat64Func struct {
	defaultHook func(string, ...float64) float64
	hooks       []func(string, ...float64) float64
	history     []ContextQueryFloat64FuncCall
	mutex       sync.Mutex
}

// QueryFloat64 delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContext) QueryFloat64(v0 string, v1 ...float64) float64 {
	r0 := m.QueryFloat64Func.nextHook()(v0, v1...)
	m.QueryFloat64Func.appendCall(ContextQueryFloat64FuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryFloat64 method
// of the parent MockContext instance is invoked and the hook queue is
// empty.
func (f *ContextQueryFloat64Func) SetDefaultHook(hook func(string, ...float64) float64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryFloat64 method of the parent MockContext instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextQueryFloat64Func) PushHook(hook func(string, ...float64) float64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextQueryFloat64Func) SetDefaultReturn(r0 float64) {
	f.SetDefaultHook(func(string, ...float64) float64 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextQueryFloat64Func) PushReturn(r0 float64) {
	f.PushHook(func(string, ...float64) float64 {
		return r0
	})
}

func (f *ContextQueryFloat64Func) nextHook() func(string, ...float64) float64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextQueryFloat64Func) appendCall(r0 ContextQueryFloat64FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextQueryFloat64FuncCall objects
// describing the invocations of this function.
func (f *ContextQueryFloat64Func) History() []ContextQueryFloat64FuncCall {
	f.mutex.Lock()
	history := make([]ContextQueryFloat64FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextQueryFloat64FuncCall is an object that describes an invocation of
// method QueryFloat64 on an instance of MockContext.
type ContextQueryFloat64FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []float64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 float64
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ContextQueryFloat64FuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextQueryFloat64FuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextQueryIntFunc describes the behavior when the QueryInt method of
// the parent MockContext instance is invoked.
type ContextQueryIntFunc struct {
	defaultHook func(string, ...int) int
	hooks       []func(string, ...int) int
	history     []ContextQueryIntFuncCall
	mutex       sync.Mutex
}

// QueryInt delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) QueryInt(v0 string, v1 ...int) int {
	r0 := m.QueryIntFunc.nextHook()(v0, v1...)
	m.QueryIntFunc.appendCall(ContextQueryIntFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryInt method of
// the parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextQueryIntFunc) SetDefaultHook(hook func(string, ...int) int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryInt method of the parent MockContext instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextQueryIntFunc) PushHook(hook func(string, ...int) int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextQueryIntFunc) SetDefaultReturn(r0 int) {
	f.SetDefaultHook(func(string, ...int) int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextQueryIntFunc) PushReturn(r0 int) {
	f.PushHook(func(string, ...int) int {
		return r0
	})
}

func (f *ContextQueryIntFunc) nextHook() func(string, ...int) int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextQueryIntFunc) appendCall(r0 ContextQueryIntFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextQueryIntFuncCall objects describing
// the invocations of this function.
func (f *ContextQueryIntFunc) History() []ContextQueryIntFuncCall {
	f.mutex.Lock()
	history := make([]ContextQueryIntFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextQueryIntFuncCall is an object that describes an invocation of
// method QueryInt on an instance of MockContext.
type ContextQueryIntFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ContextQueryIntFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextQueryIntFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextQueryInt64Func describes the behavior when the QueryInt64 method
// of the parent MockContext instance is invoked.
type ContextQueryInt64Func struct {
	defaultHook func(string, ...int64) int64
	hooks       []func(string, ...int64) int64
	history     []ContextQueryInt64FuncCall
	mutex       sync.Mutex
}

// QueryInt64 delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContext) QueryInt64(v0 string, v1 ...int64) int64 {
	r0 := m.QueryInt64Func.nextHook()(v0, v1...)
	m.QueryInt64Func.appendCall(ContextQueryInt64FuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryInt64 method of
// the parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextQueryInt64Func) SetDefaultHook(hook func(string, ...int64) int64) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryInt64 method of the parent MockContext instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextQueryInt64Func) PushHook(hook func(string, ...int64) int64) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextQueryInt64Func) SetDefaultReturn(r0 int64) {
	f.SetDefaultHook(func(string, ...int64) int64 {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextQueryInt64Func) PushReturn(r0 int64) {
	f.PushHook(func(string, ...int64) int64 {
		return r0
	})
}

func (f *ContextQueryInt64Func) nextHook() func(string, ...int64) int64 {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextQueryInt64Func) appendCall(r0 ContextQueryInt64FuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextQueryInt64FuncCall objects
// describing the invocations of this function.
func (f *ContextQueryInt64Func) History() []ContextQueryInt64FuncCall {
	f.mutex.Lock()
	history := make([]ContextQueryInt64FuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextQueryInt64FuncCall is an object that describes an invocation of
// method QueryInt64 on an instance of MockContext.
type ContextQueryInt64FuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ContextQueryInt64FuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextQueryInt64FuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextQueryStringsFunc describes the behavior when the QueryStrings
// method of the parent MockContext instance is invoked.
type ContextQueryStringsFunc struct {
	defaultHook func(string, ...[]string) []string
	hooks       []func(string, ...[]string) []string
	history     []ContextQueryStringsFuncCall
	mutex       sync.Mutex
}

// QueryStrings delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContext) QueryStrings(v0 string, v1 ...[]string) []string {
	r0 := m.QueryStringsFunc.nextHook()(v0, v1...)
	m.QueryStringsFunc.appendCall(ContextQueryStringsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryStrings method
// of the parent MockContext instance is invoked and the hook queue is
// empty.
func (f *ContextQueryStringsFunc) SetDefaultHook(hook func(string, ...[]string) []string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryStrings method of the parent MockContext instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextQueryStringsFunc) PushHook(hook func(string, ...[]string) []string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextQueryStringsFunc) SetDefaultReturn(r0 []string) {
	f.SetDefaultHook(func(string, ...[]string) []string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextQueryStringsFunc) PushReturn(r0 []string) {
	f.PushHook(func(string, ...[]string) []string {
		return r0
	})
}

func (f *ContextQueryStringsFunc) nextHook() func(string, ...[]string) []string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextQueryStringsFunc) appendCall(r0 ContextQueryStringsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextQueryStringsFuncCall objects
// describing the invocations of this function.
func (f *ContextQueryStringsFunc) History() []ContextQueryStringsFuncCall {
	f.mutex.Lock()
	history := make([]ContextQueryStringsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextQueryStringsFuncCall is an object that describes an invocation of
// method QueryStrings on an instance of MockContext.
type ContextQueryStringsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 [][]string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ContextQueryStringsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextQueryStringsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextQueryTrimFunc describes the behavior when the QueryTrim method of
// the parent MockContext instance is invoked.
type ContextQueryTrimFunc struct {
	defaultHook func(string, ...string) string
	hooks       []func(string, ...string) string
	history     []ContextQueryTrimFuncCall
	mutex       sync.Mutex
}

// QueryTrim delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) QueryTrim(v0 string, v1 ...string) string {
	r0 := m.QueryTrimFunc.nextHook()(v0, v1...)
	m.QueryTrimFunc.appendCall(ContextQueryTrimFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryTrim method of
// the parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextQueryTrimFunc) SetDefaultHook(hook func(string, ...string) string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryTrim method of the parent MockContext instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextQueryTrimFunc) PushHook(hook func(string, ...string) string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextQueryTrimFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func(string, ...string) string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextQueryTrimFunc) PushReturn(r0 string) {
	f.PushHook(func(string, ...string) string {
		return r0
	})
}

func (f *ContextQueryTrimFunc) nextHook() func(string, ...string) string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextQueryTrimFunc) appendCall(r0 ContextQueryTrimFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextQueryTrimFuncCall objects describing
// the invocations of this function.
func (f *ContextQueryTrimFunc) History() []ContextQueryTrimFuncCall {
	f.mutex.Lock()
	history := make([]ContextQueryTrimFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextQueryTrimFuncCall is an object that describes an invocation of
// method QueryTrim on an instance of MockContext.
type ContextQueryTrimFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ContextQueryTrimFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextQueryTrimFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextQueryUnescapeFunc describes the behavior when the QueryUnescape
// method of the parent MockContext instance is invoked.
type ContextQueryUnescapeFunc struct {
	defaultHook func(string, ...string) string
	hooks       []func(string, ...string) string
	history     []ContextQueryUnescapeFuncCall
	mutex       sync.Mutex
}

// QueryUnescape delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContext) QueryUnescape(v0 string, v1 ...string) string {
	r0 := m.QueryUnescapeFunc.nextHook()(v0, v1...)
	m.QueryUnescapeFunc.appendCall(ContextQueryUnescapeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryUnescape method
// of the parent MockContext instance is invoked and the hook queue is
// empty.
func (f *ContextQueryUnescapeFunc) SetDefaultHook(hook func(string, ...string) string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryUnescape method of the parent MockContext instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextQueryUnescapeFunc) PushHook(hook func(string, ...string) string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextQueryUnescapeFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func(string, ...string) string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextQueryUnescapeFunc) PushReturn(r0 string) {
	f.PushHook(func(string, ...string) string {
		return r0
	})
}

func (f *ContextQueryUnescapeFunc) nextHook() func(string, ...string) string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextQueryUnescapeFunc) appendCall(r0 ContextQueryUnescapeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextQueryUnescapeFuncCall objects
// describing the invocations of this function.
func (f *ContextQueryUnescapeFunc) History() []ContextQueryUnescapeFuncCall {
	f.mutex.Lock()
	history := make([]ContextQueryUnescapeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextQueryUnescapeFuncCall is an object that describes an invocation of
// method QueryUnescape on an instance of MockContext.
type ContextQueryUnescapeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ContextQueryUnescapeFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextQueryUnescapeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextRedirectFunc describes the behavior when the Redirect method of
// the parent MockContext instance is invoked.
type ContextRedirectFunc struct {
	defaultHook func(string, ...int)
	hooks       []func(string, ...int)
	history     []ContextRedirectFuncCall
	mutex       sync.Mutex
}

// Redirect delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) Redirect(v0 string, v1 ...int) {
	m.RedirectFunc.nextHook()(v0, v1...)
	m.RedirectFunc.appendCall(ContextRedirectFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the Redirect method of
// the parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextRedirectFunc) SetDefaultHook(hook func(string, ...int)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Redirect method of the parent MockContext instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextRedirectFunc) PushHook(hook func(string, ...int)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextRedirectFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(string, ...int) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextRedirectFunc) PushReturn() {
	f.PushHook(func(string, ...int) {
		return
	})
}

func (f *ContextRedirectFunc) nextHook() func(string, ...int) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextRedirectFunc) appendCall(r0 ContextRedirectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextRedirectFuncCall objects describing
// the invocations of this function.
func (f *ContextRedirectFunc) History() []ContextRedirectFuncCall {
	f.mutex.Lock()
	history := make([]ContextRedirectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextRedirectFuncCall is an object that describes an invocation of
// method Redirect on an instance of MockContext.
type ContextRedirectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ContextRedirectFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextRedirectFuncCall) Results() []interface{} {
	return []interface{}{}
}

// ContextRemoteAddrFunc describes the behavior when the RemoteAddr method
// of the parent MockContext instance is invoked.
type ContextRemoteAddrFunc struct {
	defaultHook func() string
	hooks       []func() string
	history     []ContextRemoteAddrFuncCall
	mutex       sync.Mutex
}

// RemoteAddr delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockContext) RemoteAddr() string {
	r0 := m.RemoteAddrFunc.nextHook()()
	m.RemoteAddrFunc.appendCall(ContextRemoteAddrFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RemoteAddr method of
// the parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextRemoteAddrFunc) SetDefaultHook(hook func() string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RemoteAddr method of the parent MockContext instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextRemoteAddrFunc) PushHook(hook func() string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextRemoteAddrFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func() string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextRemoteAddrFunc) PushReturn(r0 string) {
	f.PushHook(func() string {
		return r0
	})
}

func (f *ContextRemoteAddrFunc) nextHook() func() string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextRemoteAddrFunc) appendCall(r0 ContextRemoteAddrFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextRemoteAddrFuncCall objects
// describing the invocations of this function.
func (f *ContextRemoteAddrFunc) History() []ContextRemoteAddrFuncCall {
	f.mutex.Lock()
	history := make([]ContextRemoteAddrFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextRemoteAddrFuncCall is an object that describes an invocation of
// method RemoteAddr on an instance of MockContext.
type ContextRemoteAddrFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextRemoteAddrFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextRemoteAddrFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextRequestFunc describes the behavior when the Request method of the
// parent MockContext instance is invoked.
type ContextRequestFunc struct {
	defaultHook func() *Request
	hooks       []func() *Request
	history     []ContextRequestFuncCall
	mutex       sync.Mutex
}

// Request delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) Request() *Request {
	r0 := m.RequestFunc.nextHook()()
	m.RequestFunc.appendCall(ContextRequestFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Request method of
// the parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextRequestFunc) SetDefaultHook(hook func() *Request) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Request method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextRequestFunc) PushHook(hook func() *Request) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextRequestFunc) SetDefaultReturn(r0 *Request) {
	f.SetDefaultHook(func() *Request {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextRequestFunc) PushReturn(r0 *Request) {
	f.PushHook(func() *Request {
		return r0
	})
}

func (f *ContextRequestFunc) nextHook() func() *Request {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextRequestFunc) appendCall(r0 ContextRequestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextRequestFuncCall objects describing
// the invocations of this function.
func (f *ContextRequestFunc) History() []ContextRequestFuncCall {
	f.mutex.Lock()
	history := make([]ContextRequestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextRequestFuncCall is an object that describes an invocation of
// method Request on an instance of MockContext.
type ContextRequestFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Request
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextRequestFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextRequestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextResponseWriterFunc describes the behavior when the ResponseWriter
// method of the parent MockContext instance is invoked.
type ContextResponseWriterFunc struct {
	defaultHook func() ResponseWriter
	hooks       []func() ResponseWriter
	history     []ContextResponseWriterFuncCall
	mutex       sync.Mutex
}

// ResponseWriter delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockContext) ResponseWriter() ResponseWriter {
	r0 := m.ResponseWriterFunc.nextHook()()
	m.ResponseWriterFunc.appendCall(ContextResponseWriterFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ResponseWriter
// method of the parent MockContext instance is invoked and the hook queue
// is empty.
func (f *ContextResponseWriterFunc) SetDefaultHook(hook func() ResponseWriter) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResponseWriter method of the parent MockContext instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextResponseWriterFunc) PushHook(hook func() ResponseWriter) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextResponseWriterFunc) SetDefaultReturn(r0 ResponseWriter) {
	f.SetDefaultHook(func() ResponseWriter {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextResponseWriterFunc) PushReturn(r0 ResponseWriter) {
	f.PushHook(func() ResponseWriter {
		return r0
	})
}

func (f *ContextResponseWriterFunc) nextHook() func() ResponseWriter {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextResponseWriterFunc) appendCall(r0 ContextResponseWriterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextResponseWriterFuncCall objects
// describing the invocations of this function.
func (f *ContextResponseWriterFunc) History() []ContextResponseWriterFuncCall {
	f.mutex.Lock()
	history := make([]ContextResponseWriterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextResponseWriterFuncCall is an object that describes an invocation
// of method ResponseWriter on an instance of MockContext.
type ContextResponseWriterFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ResponseWriter
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextResponseWriterFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextResponseWriterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextSetFunc describes the behavior when the Set method of the parent
// MockContext instance is invoked.
type ContextSetFunc struct {
	defaultHook func(reflect.Type, reflect.Value) inject.TypeMapper
	hooks       []func(reflect.Type, reflect.Value) inject.TypeMapper
	history     []ContextSetFuncCall
	mutex       sync.Mutex
}

// Set delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) Set(v0 reflect.Type, v1 reflect.Value) inject.TypeMapper {
	r0 := m.SetFunc.nextHook()(v0, v1)
	m.SetFunc.appendCall(ContextSetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Set method of the
// parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextSetFunc) SetDefaultHook(hook func(reflect.Type, reflect.Value) inject.TypeMapper) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Set method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextSetFunc) PushHook(hook func(reflect.Type, reflect.Value) inject.TypeMapper) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextSetFunc) SetDefaultReturn(r0 inject.TypeMapper) {
	f.SetDefaultHook(func(reflect.Type, reflect.Value) inject.TypeMapper {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextSetFunc) PushReturn(r0 inject.TypeMapper) {
	f.PushHook(func(reflect.Type, reflect.Value) inject.TypeMapper {
		return r0
	})
}

func (f *ContextSetFunc) nextHook() func(reflect.Type, reflect.Value) inject.TypeMapper {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextSetFunc) appendCall(r0 ContextSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextSetFuncCall objects describing the
// invocations of this function.
func (f *ContextSetFunc) History() []ContextSetFuncCall {
	f.mutex.Lock()
	history := make([]ContextSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextSetFuncCall is an object that describes an invocation of method
// Set on an instance of MockContext.
type ContextSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 reflect.Type
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 reflect.Value
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 inject.TypeMapper
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextSetCookieFunc describes the behavior when the SetCookie method of
// the parent MockContext instance is invoked.
type ContextSetCookieFunc struct {
	defaultHook func(http.Cookie)
	hooks       []func(http.Cookie)
	history     []ContextSetCookieFuncCall
	mutex       sync.Mutex
}

// SetCookie delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) SetCookie(v0 http.Cookie) {
	m.SetCookieFunc.nextHook()(v0)
	m.SetCookieFunc.appendCall(ContextSetCookieFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetCookie method of
// the parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextSetCookieFunc) SetDefaultHook(hook func(http.Cookie)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetCookie method of the parent MockContext instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextSetCookieFunc) PushHook(hook func(http.Cookie)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextSetCookieFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(http.Cookie) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextSetCookieFunc) PushReturn() {
	f.PushHook(func(http.Cookie) {
		return
	})
}

func (f *ContextSetCookieFunc) nextHook() func(http.Cookie) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextSetCookieFunc) appendCall(r0 ContextSetCookieFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextSetCookieFuncCall objects describing
// the invocations of this function.
func (f *ContextSetCookieFunc) History() []ContextSetCookieFuncCall {
	f.mutex.Lock()
	history := make([]ContextSetCookieFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextSetCookieFuncCall is an object that describes an invocation of
// method SetCookie on an instance of MockContext.
type ContextSetCookieFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 http.Cookie
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextSetCookieFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextSetCookieFuncCall) Results() []interface{} {
	return []interface{}{}
}

// ContextSetParentFunc describes the behavior when the SetParent method of
// the parent MockContext instance is invoked.
type ContextSetParentFunc struct {
	defaultHook func(inject.Injector)
	hooks       []func(inject.Injector)
	history     []ContextSetParentFuncCall
	mutex       sync.Mutex
}

// SetParent delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) SetParent(v0 inject.Injector) {
	m.SetParentFunc.nextHook()(v0)
	m.SetParentFunc.appendCall(ContextSetParentFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetParent method of
// the parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextSetParentFunc) SetDefaultHook(hook func(inject.Injector)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetParent method of the parent MockContext instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ContextSetParentFunc) PushHook(hook func(inject.Injector)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextSetParentFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(inject.Injector) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextSetParentFunc) PushReturn() {
	f.PushHook(func(inject.Injector) {
		return
	})
}

func (f *ContextSetParentFunc) nextHook() func(inject.Injector) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextSetParentFunc) appendCall(r0 ContextSetParentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextSetParentFuncCall objects describing
// the invocations of this function.
func (f *ContextSetParentFunc) History() []ContextSetParentFuncCall {
	f.mutex.Lock()
	history := make([]ContextSetParentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextSetParentFuncCall is an object that describes an invocation of
// method SetParent on an instance of MockContext.
type ContextSetParentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 inject.Injector
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextSetParentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextSetParentFuncCall) Results() []interface{} {
	return []interface{}{}
}

// ContextURLPathFunc describes the behavior when the URLPath method of the
// parent MockContext instance is invoked.
type ContextURLPathFunc struct {
	defaultHook func(string, ...string) string
	hooks       []func(string, ...string) string
	history     []ContextURLPathFuncCall
	mutex       sync.Mutex
}

// URLPath delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) URLPath(v0 string, v1 ...string) string {
	r0 := m.URLPathFunc.nextHook()(v0, v1...)
	m.URLPathFunc.appendCall(ContextURLPathFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the URLPath method of
// the parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextURLPathFunc) SetDefaultHook(hook func(string, ...string) string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// URLPath method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextURLPathFunc) PushHook(hook func(string, ...string) string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextURLPathFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func(string, ...string) string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextURLPathFunc) PushReturn(r0 string) {
	f.PushHook(func(string, ...string) string {
		return r0
	})
}

func (f *ContextURLPathFunc) nextHook() func(string, ...string) string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextURLPathFunc) appendCall(r0 ContextURLPathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextURLPathFuncCall objects describing
// the invocations of this function.
func (f *ContextURLPathFunc) History() []ContextURLPathFuncCall {
	f.mutex.Lock()
	history := make([]ContextURLPathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextURLPathFuncCall is an object that describes an invocation of
// method URLPath on an instance of MockContext.
type ContextURLPathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ContextURLPathFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextURLPathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ContextValueFunc describes the behavior when the Value method of the
// parent MockContext instance is invoked.
type ContextValueFunc struct {
	defaultHook func(reflect.Type) reflect.Value
	hooks       []func(reflect.Type) reflect.Value
	history     []ContextValueFuncCall
	mutex       sync.Mutex
}

// Value delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockContext) Value(v0 reflect.Type) reflect.Value {
	r0 := m.ValueFunc.nextHook()(v0)
	m.ValueFunc.appendCall(ContextValueFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Value method of the
// parent MockContext instance is invoked and the hook queue is empty.
func (f *ContextValueFunc) SetDefaultHook(hook func(reflect.Type) reflect.Value) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Value method of the parent MockContext instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ContextValueFunc) PushHook(hook func(reflect.Type) reflect.Value) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ContextValueFunc) SetDefaultReturn(r0 reflect.Value) {
	f.SetDefaultHook(func(reflect.Type) reflect.Value {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ContextValueFunc) PushReturn(r0 reflect.Value) {
	f.PushHook(func(reflect.Type) reflect.Value {
		return r0
	})
}

func (f *ContextValueFunc) nextHook() func(reflect.Type) reflect.Value {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ContextValueFunc) appendCall(r0 ContextValueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ContextValueFuncCall objects describing the
// invocations of this function.
func (f *ContextValueFunc) History() []ContextValueFuncCall {
	f.mutex.Lock()
	history := make([]ContextValueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ContextValueFuncCall is an object that describes an invocation of method
// Value on an instance of MockContext.
type ContextValueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 reflect.Type
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 reflect.Value
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ContextValueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ContextValueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
